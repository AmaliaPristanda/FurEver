
CREATE TABLE animale (
    id_animal     NUMBER(10)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 MINVALUE 1 MAXVALUE 9999999999 NOCACHE ORDER )
    NOT NULL,
    data_nasterii DATE NOT NULL,
    data_aducerii DATE NOT NULL,
    data_adoptiei DATE,
    id_tip        NUMBER(2) NOT NULL,
    cnp           VARCHAR2(13),
    id_cusca      NUMBER(3)
)
LOGGING;

ALTER TABLE animale ADD CONSTRAINT animale_data_aducerii_ck CHECK ( data_aducerii >= data_nasterii );

ALTER TABLE animale ADD CONSTRAINT animale_data_adoptiei_ck CHECK ( data_adoptiei > data_aducerii );

ALTER TABLE animale ADD CONSTRAINT animale_pk PRIMARY KEY ( id_animal );

CREATE TABLE client (
    cnp    VARCHAR2(13) NOT NULL,
    nume   VARCHAR2(40) NOT NULL,
    adresa VARCHAR2(60) NOT NULL
)
LOGGING;

ALTER TABLE client
    ADD CONSTRAINT client_cnp_ck CHECK ( REGEXP_LIKE ( cnp,
                                                       '^[1-9]\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])(0[1-9]|[1-4]\d|5[0-2]|99)(00[1-9]|0[1-9]\d|[1-9]\d\d)\d$' ) );

ALTER TABLE client
    ADD CONSTRAINT client_nume_ck CHECK ( length(nume) > 2
                                          AND instr(nume, ' ') != 0 );

ALTER TABLE client
    ADD CONSTRAINT client_adresa_ck CHECK ( instr(lower(adresa), 'oras') != 0
                                            AND instr(lower(adresa), 'strada') != 0
                                            AND instr(lower(adresa), 'cod postal') != 0 );

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( cnp );

CREATE TABLE cusca (
    id_cusca   NUMBER(3)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 MINVALUE 1 MAXVALUE 300 NOCACHE ORDER )
    NOT NULL,
    dimensiuni VARCHAR2(10) NOT NULL,
    stare      NUMBER DEFAULT 0 NOT NULL
)
LOGGING;

ALTER TABLE cusca
    ADD CONSTRAINT cusca_dimensiuni_ck CHECK ( dimensiuni IN ( '1.5x1.5m', '1x1m', '2x2m', '80x80cm' ) );

ALTER TABLE cusca
    ADD CONSTRAINT cusca_stare_ck CHECK ( stare IN ( '0', '1' ) );

ALTER TABLE cusca ADD CONSTRAINT cusca_pk PRIMARY KEY ( id_cusca );

CREATE TABLE detalii_animale (
    id_animal NUMBER(10) NOT NULL,
    sex       VARCHAR2(1) NOT NULL,
    nume      VARCHAR2(12) NOT NULL,
    talie     VARCHAR2(10) NOT NULL,
    culoare   VARCHAR2(15) NOT NULL,
    rasa      VARCHAR2(20)
)
LOGGING;

ALTER TABLE detalii_animale
    ADD CONSTRAINT detalii_animale_sex_ck CHECK ( sex IN ( 'F', 'M' ) );

ALTER TABLE detalii_animale
    ADD CONSTRAINT detalii_animale_nume_ck CHECK ( length(nume) > 2 );

ALTER TABLE detalii_animale
    ADD CONSTRAINT detalii_animale_talie CHECK ( talie IN ( 'mare', 'medie', 'mica' ) );

CREATE UNIQUE INDEX detalii_animale__idx ON
    detalii_animale (
        id_animal
    ASC )
        LOGGING;

ALTER TABLE detalii_animale ADD CONSTRAINT detalii_animale_pk PRIMARY KEY ( id_animal );

CREATE TABLE fisa_medicala (
    id_fisa_medicala NUMBER(12)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 MINVALUE 1 MAXVALUE 999999999999 NOCACHE ORDER )
    NOT NULL,
    id_animal        NUMBER(10) NOT NULL,
    data             DATE NOT NULL,
    stare_sanatate   VARCHAR2(10) DEFAULT 'sanatos' NOT NULL,
    boala            VARCHAR2(20),
    tratament        VARCHAR2(30)
)
LOGGING;

ALTER TABLE fisa_medicala
    ADD CONSTRAINT fisa_medicala_stare_sanatate CHECK ( stare_sanatate IN ( 'bolnav', 'sanatos' ) );

ALTER TABLE fisa_medicala ADD CONSTRAINT fisa_medicala_pk PRIMARY KEY ( id_fisa_medicala );

CREATE TABLE tipuri_animale (
    id_tip       NUMBER(2)
        GENERATED BY DEFAULT AS IDENTITY ( START WITH 1 MINVALUE 1 MAXVALUE 9 NOCACHE ORDER )
    NOT NULL,
    denumire_tip VARCHAR2(15) NOT NULL
)
LOGGING;

ALTER TABLE tipuri_animale
    ADD CONSTRAINT tip_anim_denumire_tip_ck CHECK ( denumire_tip IN ( 'caine', 'chinchilla', 'iepure', 'papagal', 'pisica' ) );

ALTER TABLE tipuri_animale ADD CONSTRAINT tipuri_animale_pk PRIMARY KEY ( id_tip );

ALTER TABLE tipuri_animale ADD CONSTRAINT denumire_tip_uk UNIQUE ( denumire_tip );

ALTER TABLE detalii_animale
    ADD CONSTRAINT animale_detalii_animale_fk FOREIGN KEY ( id_animal )
        REFERENCES animale ( id_animal )
    NOT DEFERRABLE;

ALTER TABLE fisa_medicala
    ADD CONSTRAINT animale_fisa_medicala_fk FOREIGN KEY ( id_animal )
        REFERENCES animale ( id_animal )
    NOT DEFERRABLE;

ALTER TABLE animale
    ADD CONSTRAINT client_animale_fk FOREIGN KEY ( cnp )
        REFERENCES client ( cnp )
    NOT DEFERRABLE;

ALTER TABLE animale
    ADD CONSTRAINT cusca_animale_fk FOREIGN KEY ( id_cusca )
        REFERENCES cusca ( id_cusca )
    NOT DEFERRABLE;

ALTER TABLE animale
    ADD CONSTRAINT tipuri_animale_animale_fk FOREIGN KEY ( id_tip )
        REFERENCES tipuri_animale ( id_tip )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER Trg_animale_cusca 
    BEFORE INSERT OR UPDATE ON Animale 
    FOR EACH ROW 
BEGIN
    DECLARE 
        stareCusca Cusca.stare%TYPE;
        idCuscaNoua Cusca.id_cusca%type;
        idCuscaVeche Cusca.id_cusca%type;
        dataAdoptieiNoua Animale.data_adoptiei%type;
	    dataAdoptieiVeche Animale.data_adoptiei%type;

	    cnpNou Animale.cnp%TYPE;
	    cnpVechi Animale.cnp%TYPE;
	
        tipAnimal Animale.id_tip%TYPE;
	   denumireTipAnimal Tipuri_animale.denumire_tip%TYPE;
	   dimensiuneCusca Cusca.dimensiuni%TYPE;

	   stare_cusca_exp EXCEPTION;
	   PRAGMA exception_init(stare_cusca_exp, -20000);

	   
      

    BEGIN 
        idCuscaNoua := :new.id_cusca;
        idCuscaVeche := :old.id_cusca;
        dataAdoptieiNoua := :new.data_adoptiei;
        dataAdoptieiVeche := :old.data_adoptiei;

        cnpNou := :new.cnp;
        cnpVechi := :old.cnp;

		
       
         tipAnimal := :new.id_tip;
	   
	   --daca vreau sa mut un animal dintr-o cusca in alta=>dataAdoptiei=NULL
	   --daca animalul este adoptat=>idCuscaNoua=NULL

	   IF idCuscaNoua != idCuscaVeche  OR (idCuscaVeche IS NULL AND cnpNou is NULL) THEN   
        		--daca mut un animal dintr-o cusca in alta, vreau sa vad daca noua cusca este libera
       		 SELECT stare INTO stareCusca FROM Cusca WHERE Cusca.id_cusca=idCuscaNoua;
       		 SELECT denumire_tip INTO denumireTipAnimal FROM Tipuri_animale WHERE Tipuri_animale.id_tip=tipAnimal;
		     SELECT dimensiuni INTO dimensiuneCusca FROM Cusca where Cusca.id_cusca=idCuscaNoua;
       		 
	   		 IF stareCusca=1 THEN
	   		 	RAISE_APPLICATION_ERROR(-20000,'cusca este ocupata');
	   		 ELSE
			    IF dimensiuneCusca='80x80cm' THEN
			        IF denumireTipAnimal='chinchilla' OR denumireTipAnimal='papagal' THEN
			            UPDATE Cusca SET stare=0 WHERE Cusca.id_cusca=idCuscaVeche;
				        UPDATE Cusca SET stare=1 WHERE Cusca.id_cusca=idCuscaNoua;
				    ELSE
			            RAISE_APPLICATION_ERROR(-20100, 'in custile de 80x80cm pot sta doar chinchilla si papagali');
			        END IF;
			    ELSE
			        IF denumireTipAnimal='chinchilla' OR denumireTipAnimal='papagal' THEN
			             RAISE_APPLICATION_ERROR(-20101, 'chinchilla si papagalii pot sta doar in custile de 80x80cm');
			        ELSE
    			        UPDATE Cusca SET stare=0 WHERE Cusca.id_cusca=idCuscaVeche;
    				    UPDATE Cusca SET stare=1 WHERE Cusca.id_cusca=idCuscaNoua;
    				END IF;
				END IF;
   		 		
	         END IF;
	   ELSE
	   		 IF dataAdoptieiNoua IS NOT NULL THEN
	   			--verfic daca animalul nu a fost deja adoptat
	   			--daca am gresit data adoptiei si vreau sa o schimb atunci verific cnp-ul 	
	   			IF cnpNou!=cnpVechi THEN
	   				RAISE_APPLICATION_ERROR(-20102, 'animalul a fost deja adoptat');
	   			ELSE
	   			 	
   		 		--eliberez cusca in care se afla
	   		 		UPDATE Cusca SET stare=0 WHERE Cusca.id_cusca=:old.id_cusca;
	   		 		:new.id_cusca := NULL;
	   		 	END IF;
	   		 END IF;
	   END IF;

	   
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				dbms_output.put_line('Cusca nu a fost gasita');
	   	
     END;
END; 
/

CREATE OR REPLACE TRIGGER Trg_animale_data_aducerii 
    BEFORE INSERT OR UPDATE ON Animale 
    FOR EACH ROW 
BEGIN
	DECLARE
		data_aducerii_exceed EXCEPTION;
		PRAGMA exception_init(data_aducerii_exceed, -20001);
		
	BEGIN
		IF( :new.data_aducerii > SYSDATE)
		THEN
			RAISE_APPLICATION_ERROR( -20001,
				'Data invalida: '||TO_CHAR(:new.data_aducerii, 'DD.MM.YYYY HH24:MI:SS') || ' trebuie sa fie mai mica decat data curenta.');
		END IF;

		dbms_output.put_line('Data aducerii a fost verificata si este corecta');

		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				dbms_output.put_line('Animalul nu a fost gasit');
		
	END;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Animale_data_nasterii 
    BEFORE INSERT OR UPDATE ON Animale 
    FOR EACH ROW 
BEGIN
	DECLARE
		data_nasterii_exceed EXCEPTION;
		PRAGMA exception_init(data_nasterii_exceed, -20002);
	BEGIN
		IF( :new.data_nasterii > SYSDATE)
		THEN
			RAISE_APPLICATION_ERROR( -20002,
				'Data invalida: '||TO_CHAR(:new.data_nasterii, 'DD.MM.YYYY HH24:MI:SS') || ' trebuie sa fie mai mica decat data curenta.');
		END IF;

		dbms_output.put_line('Data nasterii a fost verificata si este corecta');

		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				dbms_output.put_line('Animalul nu a fost gasit');
	END;
END; 
/

CREATE OR REPLACE TRIGGER Trg_client_cnp 
    BEFORE INSERT OR UPDATE ON Client 
    FOR EACH ROW 
BEGIN  
	DECLARE  
		CNP Client.cnp%TYPE;  
  
		an VARCHAR(2);  
		anul varchar(4);

		varsta EXCEPTION;
		PRAGMA exception_init(varsta, -20009);
  
  
	BEGIN  
		CNP := :new.cnp;  
  
		an := substr(to_char(CNP),2,2);  

		IF to_number(an)<= 22 THEN
			anul:=CONCAT(anul,'20');
			anul:=concat(anul,an);
		ELSE
			anul:=concat(anul,'19');
			anul:=concat(anul,an);
		END IF;
		
  		IF to_number(to_char(sysdate,'YYYY'))-to_number(anul)<18 THEN
			RAISE_APPLICATION_ERROR(-20009, 'clientul trebuie sa aiba macar 18 ani');
		 
		END IF;  

		dbms_output.put_line('Varsta a fost verificata si este corespunzatoare');

		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				dbms_output.put_line('Clientul nu a fost gasit');
		
		  
	END;  
END; 
/

CREATE OR REPLACE TRIGGER Trg_fisa_medicala_data 
    BEFORE INSERT OR UPDATE ON Fisa_medicala 
    FOR EACH ROW 
BEGIN

	DECLARE 
		dataAducere Animale.data_aducerii%type;
		idAnimal Animale.id_animal%type;
		dataFisaMedicala Fisa_medicala.data%type;

		data_fisaMedicala_exceed EXCEPTION;
		PRAGMA exception_init(data_fisaMedicala_exceed, -20006);

		data_fisaMedicala_exceed2 EXCEPTION;
		PRAGMA exception_init(data_fisaMedicala_exceed2, -20005);

	BEGIN
		
		dataFisaMedicala := :new.data;
		idAnimal := :new.id_animal;
		
		SELECT data_aducerii INTO dataAducere FROM Animale WHERE Animale.id_animal=idAnimal;
	
		IF( :new.data > SYSDATE)
		THEN
			RAISE_APPLICATION_ERROR( -20006,
				' Data invalida: '||TO_CHAR(:new.data, 'DD.MM.YYYY HH24:MI:SS') || ' trebuie sa fie mai mica decat data curenta.');
		ELSE
			IF dataAducere>dataFisaMedicala THEN
				RAISE_APPLICATION_ERROR(-20005, ' Fisa medicala nu poate fi facuta inainte ca animalul sa fi fost adus la centru');
			END IF;	
		END IF;

		dbms_output.put_line('Data fisei medicale a fost verificata si este corecta');

		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				dbms_output.put_line('Animalul nu a fost gasit');

	END;
	
END; 
/
